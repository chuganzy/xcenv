#!/usr/bin/env bash
# Summary: Show the current Xcode version
# Usage: xcenv version-name <version>

return_xcenv_version()
{
  echo "${1/Contents\/Developer/}"
  exit
}

set -e
[ -n "$XCENV_DEBUG" ] && set -x

if [ -n "$1" ]; then
  XCENV_VERSION=$1
else
  XCENV_VERSION_FILE="$(xcenv-version-file)"
  XCENV_VERSION="$(xcenv-version-file-read "$XCENV_VERSION_FILE" || true)"
fi

if [ -z "$XCENV_VERSION" ] || [ "$XCENV_VERSION" = "system" ]; then
  return_xcenv_version $(xcode-select -p)
fi

find_xcode_app_from_version()
{
	XCODE_VERSION=$1
	
	XCODE_LOCATIONS=$(xcenv-xcodes)
	XCODE_VERSIONS=()
  
	for APP in $XCODE_LOCATIONS; do
		VERSION=$(xcenv-xcode-version $APP)
		XCODE_VERSIONS+=("${VERSION}-${APP}")
	done
  
  IFS=$'\n'
  XCODE_VERSIONS=($(sort -r <<<"${XCODE_VERSIONS[*]}"))
  unset IFS
  
  for VERSION in ${XCODE_VERSIONS[*]}; do
    APP=${VERSION/*-/}
    VERSION=${VERSION/-*/}
	  if [[ "$VERSION" =~ ^$XCODE_VERSION$ ]]; then
	  	XCODE_APP="$APP"
	  	break;
	  fi
  done
	
	echo $XCODE_APP
}

if [ -d "$XCENV_VERSION" ]; then
  return_xcenv_version "$XCENV_VERSION"
fi

XCODE_APP=$(find_xcode_app_from_version $XCENV_VERSION)
if [ -n "$XCODE_APP" ]; then
  return_xcenv_version "${XCODE_APP}"
elif [ -n "$1" ]; then
  echo "xcenv: version \`$XCENV_VERSION' is not installed" >&2
  exit 1
else
  echo "xcenv: version \`$XCENV_VERSION' is not installed (set by $(xcenv-version-origin))" >&2
  exit 1
fi